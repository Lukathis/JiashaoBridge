!!! ---------------------------------- 1. Generate nodes ------------------------------------------
!!! 1.1 Generate nodes of girder
*do, i, 1, girder_element_num
    !!! outer girder
    n, i,      left_girder_coord(i, 1), left_girder_coord(i, 2)+50, left_girder_coord(i, 3)
    n, i+500,  left_girder_coord(i, 1), left_girder_coord(i, 2)+50, left_girder_coord(i, 3) - offset_outer_cable
    n, i+1000, left_girder_coord(i, 1), left_girder_coord(i, 2)+50, left_girder_coord(i, 3)+offset_inner_cable

    !!! inner girder
    n, i+1500, left_girder_coord(i, 1), left_girder_coord(i, 2)+50, -left_girder_coord(i, 3)
    n, i+2000, left_girder_coord(i, 1), left_girder_coord(i, 2)+50, -left_girder_coord(i, 3)+offset_outer_cable
    n, i+2500, left_girder_coord(i, 1), left_girder_coord(i, 2)+50, -left_girder_coord(i, 3) - offset_inner_cable

    n, i+4000, left_girder_coord(i, 1), left_girder_coord(i, 2)+50, 0
*enddo

!!! 1.2 Generate nodes of tower
*do,i,1,tower_num
    *do,j,1,tower_element_num
            tmp_x=tower_coord(j,1)+distance_between_towers*(i-1)
            tmp_y=tower_coord(j,2)+50
            tmp_z=tower_coord(j,3)
            node_num=3000+50*(i-1)+j
            n,node_num,tmp_x,tmp_y,tmp_z
    *enddo
*enddo

!!! 1.3 Reference nodes for BEAM4 and BEAM188
n,10001,-1,10000,0
n,10002,-1,-10000,0
n,10003,1000,10000,-100

!!! ---------------------------------- 2. Generate element ------------------------------------------
!!! 2.1 Generate elements of girder
esel,none
type,1
mat,1
secnum,17
real,17
*do,i,1,girder_element_num-1
    en,i,i,i+1,10001
*enddo
cm,INNER_GIRDER,elem

esel,none
type,1
mat,1
secnum,17
real,17
*do,i,1,girder_element_num-1
    en,i+500,i+1500,i+1501,10001
*enddo
cm,OUTTER_GIRDER,elem

esel,none
esel,s,elem,,INNER_GIRDER
esel,a,elem,,OUTTER_GIRDER
cm,GIRDERS,elem

!!! 2.2 rigid constrain
esel,none
type,2
mat,2
real,101
*do,i,1,girder_element_num
    en,i+1000,i,i+500,10003
    en,i+1500,i,i+1000,10003

    en,i+2000,i+1500,i+2000,10003
    en,i+2500,i+1500,i+2500,10003
*enddo
cm,RIGID_COMSTRAINTS,elem

!!! 2.3 main tower
esel,none
type,3
mat,3
*do,i,0,tower_num-1
    *do,j,1,tower_element_num-1
        secnum,tower_coord(j+1,5)
        real,tower_coord(j+1,5)
        en,j+3000+i*50,j+50*i+3000,j+50*i+3001,10001
    *enddo
*enddo
cm,TOWERS,elem

!!! 2.4 cable elements
esel,none
*dim,cab_girder,array,cable_real_num,4
*dim,cab_tower,array,cable_num,6

count_1=0
*do,i,1,girder_element_num
    *if,left_girder_coord(i,4),eq,2,then
        count_1=count_1+1
        cab_girder(count_1,1)=i+500
        cab_girder(count_1,2)=i+1000
        cab_girder(count_1,3)=i+2000
        cab_girder(count_1,4)=i+2500
    *endif
*enddo

count_2=0
*do,i,1,tower_element_num
    *if,tower_coord(i,4),eq,2,then
        count_2=count_2+1
        *do,j,1,tower_num
            cab_tower(count_2,j)=i+3000+(j-1)*50
        *enddo
    *endif
*enddo

type,4
mat,4
*do,j,0,5
    *do,i,1,cable_num
        ! real,1000+i+j*cable_num*2         !!! old mapping relationship
        real, 1000+(2*cable_num+4*cable_num*j+1)-(i+j*cable_num*2+cable_num)
        en,4000+i*8-7+j*cable_num*8,cab_tower(i,j+1),cab_girder(cable_num+1-i+j*2*cable_num,1)
        en,4000+i*8-6+j*cable_num*8,cab_tower(i,j+1),cab_girder(cable_num+1-i+j*2*cable_num,2)
        en,4000+i*8-5+j*cable_num*8,cab_tower(i,j+1),cab_girder(cable_num+1-i+j*2*cable_num,3)
        en,4000+i*8-4+j*cable_num*8,cab_tower(i,j+1),cab_girder(cable_num+1-i+j*2*cable_num,4)

        real,1000+i+j*cable_num*2+cable_num
        en,4000+i*8-3+j*cable_num*8,cab_tower(i,j+1),cab_girder(cable_num+i+j*2*cable_num,1)
        en,4000+i*8-2+j*cable_num*8,cab_tower(i,j+1),cab_girder(cable_num+i+j*2*cable_num,2)
        en,4000+i*8-1+j*cable_num*8,cab_tower(i,j+1),cab_girder(cable_num+i+j*2*cable_num,3)
        en,4000+i*8-0+j*cable_num*8,cab_tower(i,j+1),cab_girder(cable_num+i+j*2*cable_num,4)
    *enddo
*enddo
cm,CABLES,elem

!!! 2.5 Traverse girder
esel,none
count_3=0
*do,i,1,girder_element_num
    *if,left_girder_coord(i,4),eq,5,then
        count_3=count_3+1
    *endif
*enddo

*dim,traverse_girder,array,count_3,3
count_3=0
*do,i,1,girder_element_num
    *if,left_girder_coord(i,4),eq,5,then
        count_3=count_3+1
        traverse_girder(count_3,1)=i
        traverse_girder(count_3,2)=i+1500
        traverse_girder(count_3,3)=i+4000
    *endif
*enddo

type,5
mat,5
secnum,18
real,18
*do,i,1,count_3
    en,5000+i*2-1,traverse_girder(i,1),traverse_girder(i,3),10003
    en,5000+i*2,traverse_girder(i,2),traverse_girder(i,3),10003
*enddo
cm,TRAVERSE_GIRDERS,elem

!!! ---------------------------------- 3. Constraints ------------------------------------------
allsel,all


!!! apply constraints
count_0 = 0
count_1 = 0

!!! count and initialize array
*do,i,1,girder_element_num
    *if,left_girder_coord(i,4),eq,1,then
        count_0=count_0+1
    *elseif,left_girder_coord(i,4),eq,4,then
        count_1=count_1+1
    *endif
*enddo

*dim,cons_1,array,count_0,2
*dim,cons_2,array,count_1,2

count_0=0
count_1=0

*do,i,1,girder_element_num
    *if,left_girder_coord(i,4),eq,1,then
        count_0=count_0+1
        cons_1(count_0,1)=i
        cons_1(count_0,2)=i+1500
    *elseif,left_girder_coord(i,4),eq,4,then
        count_1=count_1+1
        cons_2(count_1,1)=i
        cons_2(count_1,2)=i+1500
    *endif
*enddo

*do,i,1,count_0
    d,cons_1(i,1),uz
    d,cons_1(i,1),uy
    d,cons_1(i,1),rotx

    d,cons_1(i,2),uz
    d,cons_1(i,2),uy
    d,cons_1(i,2),rotx
*enddo

*do,i,1,tower_num
    d,1+50*(i-1)+3000,all
    !cp, i*3-2, uz, 7+50*(i-1)+3000, cons_2(i*2-1,1), cons_2(i*2,1), cons_2(i*2-1,2), cons_2(i*2,2)
    !cp, i*3-1, ux, 7+50*(i-1)+3000, cons_2(i*2-1,1), cons_2(i*2,1), cons_2(i*2-1,2), cons_2(i*2,2)
    cp, i*3-0, uy, 7+50*(i-1)+3000, cons_2(i*2-1,1), cons_2(i*2,1), cons_2(i*2-1,2), cons_2(i*2,2)
*enddo

save,Jiashao,db
resume,Jiashao,db
